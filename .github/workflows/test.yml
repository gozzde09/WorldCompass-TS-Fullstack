name: Run Cypress Tests

on:
  push:
    branches:
      - main

jobs:
  tests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: ${{ secrets.DB_USER }}
          POSTGRES_PASSWORD: ${{ secrets.PASSWORD }}
          POSTGRES_DB: ${{ secrets.DB_NAME }}
        ports:
          - "5432:5432"
        options: >-
          --health-cmd="bash -c 'pg_isready -U postgres'"
          --health-interval=30s
          --health-timeout=5s
          --health-retries=5
    steps:
      # Checkout the code from repo
      - name: Checkout code
        uses: actions/checkout@v3

      # Install Docker Compose
      - name: Set up Docker Compose
        uses: docker/setup-buildx-action@v2

      # Install dependencies for frontend and backend
      - name: Install Frontend dependencies
        working-directory: frontend
        run: npm install
      - name: Install Backend dependencies
        working-directory: backend
        run: npm install

      # Build containers
      - name: Build containers
        run: docker compose up --build -d

      # Kör Cypress End-to-End tests
      - name: Run Cypress E2E tests
        working-directory: frontend
        run: npm run test:e2e

      #  Kör komponenttester med Cypress
      - name: Run Cypress Component Tests
        working-directory: frontend
        run: npm run test:component

      # Stop and remove containers after tests
      - name: Stop and remove containers
        run: docker compose down
# https://docs.github.com/en/actions/use-cases-and-examples/using-containerized-services/creating-postgresql-service-containers
